// Copyright 2024 Google LLC. All rights reserved.

#pragma once

#include <string.h>
#include <cstdint>

#include <lib/core/CHIPError.h>
#include <lib/support/Span.h>
#include <platform/CHIPDeviceConfig.h>

#include <crypto/CHIPCryptoPAL.h>
#include <credentials/DeviceAttestationCredsProvider.h>

namespace google {
namespace matter {

class GoogleMultiDeviceAttestationProvider : public chip::Credentials::DeviceAttestationCredentialsProvider
{
public:
    void SetUseSecondDac(bool useSecondDac)
    {
        mUseSecondDac = useSecondDac;
    }

    CHIP_ERROR GetCertificationDeclaration(chip::MutableByteSpan & out_cd_buffer) override
    {
        // out/host/chip-cert gen-cd -C credentials/test/certification-declaration/Chip-Test-CD-Signing-Cert.pem -K credentials/test/certification-declaration/Chip-Test-CD-Signing-Key.pem --out cd.bin -f 1 -V 6006 -p FFFE -d 000E -c "ZIG0000000000000000" -l 0 -i 0 -n 0001 -t 0
        const uint8_t kCdContents[235] = {
            0x30, 0x81, 0xe8, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x02, 0xa0, 0x81,
            0xda, 0x30, 0x81, 0xd7, 0x02, 0x01, 0x03, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48,
            0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x30, 0x43, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
            0x01, 0x07, 0x01, 0xa0, 0x36, 0x04, 0x34, 0x15, 0x24, 0x00, 0x01, 0x25, 0x01, 0x06, 0x60, 0x36,
            0x02, 0x05, 0xfe, 0xff, 0x18, 0x24, 0x03, 0x0e, 0x2c, 0x04, 0x13, 0x5a, 0x49, 0x47, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x24, 0x05,
            0x00, 0x24, 0x06, 0x00, 0x24, 0x07, 0x01, 0x24, 0x08, 0x00, 0x18, 0x31, 0x7e, 0x30, 0x7c, 0x02,
            0x01, 0x03, 0x80, 0x14, 0x62, 0xfa, 0x82, 0x33, 0x59, 0xac, 0xfa, 0xa9, 0x96, 0x3e, 0x1c, 0xfa,
            0x14, 0x0a, 0xdd, 0xf5, 0x04, 0xf3, 0x71, 0x60, 0x30, 0x0b, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,
            0x65, 0x03, 0x04, 0x02, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
            0x02, 0x04, 0x48, 0x30, 0x46, 0x02, 0x21, 0x00, 0x9c, 0xc9, 0x7f, 0xdb, 0x8e, 0xa5, 0x54, 0x78,
            0xec, 0x39, 0x50, 0x2b, 0xf1, 0x7c, 0x58, 0x01, 0x03, 0xc7, 0x8b, 0x1d, 0xe4, 0x3d, 0xaa, 0x40,
            0xff, 0xcb, 0x8e, 0x72, 0xdd, 0xbf, 0xa5, 0x5a, 0x02, 0x21, 0x00, 0xed, 0x67, 0xec, 0x8b, 0x10,
            0x98, 0x83, 0x89, 0xa8, 0xcc, 0xc3, 0xc7, 0xb5, 0x1d, 0x79, 0x0c, 0x9d, 0xf6, 0x12, 0x9a, 0xe0,
            0x0b, 0x9a, 0x76, 0xa4, 0x78, 0x31, 0x9d, 0x9e, 0x21, 0xf4, 0xfa,
        };

        return chip::CopySpanToMutableSpan(chip::ByteSpan{ kCdContents }, out_cd_buffer);
    }

    CHIP_ERROR GetFirmwareInformation(chip::MutableByteSpan & out_firmware_info_buffer) override
    {
        out_firmware_info_buffer.reduce_size(0);
        return CHIP_NO_ERROR;
    }

    // openssl ecparam -name prime256v1 -genkey -noout -out examples/google-multi-device/device-common/attestation/Matter-Development-DAC-6006-FFFE-Key.der -outform der
    // openssl ec -inform der -outform pem -in examples/google-multi-device/device-common/attestation/Matter-Development-DAC-6006-FFFE-Key.der -out  examples/google-multi-device/device-common/attestation/Matter-Development-DAC-6006-FFFE-Key.pem
    // python examples/google-multi-device/device-common/attestation/dacs.py -c./out/debug/linux_x64_gcc/ -o examples/google-multi-device/device-common/attestation/ -d examples/google-multi-device/device-common/attestation/
    CHIP_ERROR GetDeviceAttestationCert(chip::MutableByteSpan & out_dac_buffer)
    {
        const uint8_t kDevelopmentDAC_Cert_6006_FFFE_1[493] = {
            0x30, 0x82, 0x01, 0xe9, 0x30, 0x82, 0x01, 0x8e, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x4a, 0x17, 0xbe, 0x54, 0x80, 0x05,
            0x6b, 0x8f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x3d, 0x31, 0x25, 0x30, 0x23, 0x06,
            0x03, 0x55, 0x04, 0x03, 0x0c, 0x1c, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x50, 0x41, 0x49, 0x20,
            0x30, 0x78, 0x36, 0x30, 0x30, 0x36, 0x20, 0x6e, 0x6f, 0x20, 0x50, 0x49, 0x44, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06,
            0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x36, 0x30, 0x30, 0x36, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x34, 0x30,
            0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32,
            0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x53, 0x31, 0x25, 0x30, 0x23, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1c, 0x4d, 0x61,
            0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x44, 0x41, 0x43, 0x20, 0x30, 0x78, 0x36, 0x30, 0x30, 0x36, 0x2f, 0x30,
            0x78, 0x46, 0x46, 0x46, 0x45, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01,
            0x0c, 0x04, 0x36, 0x30, 0x30, 0x36, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02,
            0x02, 0x0c, 0x04, 0x46, 0x46, 0x46, 0x45, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06,
            0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x5d, 0xc0, 0xb7, 0xc2, 0x38, 0x50, 0x63, 0x8c,
            0x01, 0xf6, 0x71, 0x8c, 0x1a, 0x29, 0x8d, 0x02, 0xfc, 0x6a, 0x96, 0x8c, 0x64, 0xda, 0x48, 0xab, 0xaa, 0xfe, 0x02, 0xe4, 0xb4,
            0x71, 0x7c, 0x46, 0xe1, 0x6a, 0xfd, 0x75, 0x10, 0xc1, 0xc5, 0x06, 0x9f, 0x93, 0xcf, 0x64, 0xf6, 0xa5, 0x90, 0x8b, 0x9d, 0xdd,
            0x8d, 0xdc, 0xed, 0xdd, 0x0a, 0xac, 0xc3, 0x35, 0xf9, 0xdb, 0x01, 0x71, 0x7f, 0xa7, 0xa3, 0x60, 0x30, 0x5e, 0x30, 0x0c, 0x06,
            0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
            0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x8a, 0x02, 0x63, 0xb8,
            0x2b, 0x1e, 0x4a, 0x9b, 0xa1, 0xfd, 0xb5, 0xcc, 0x75, 0x20, 0x3c, 0x96, 0xff, 0x68, 0xd8, 0xee, 0x30, 0x1f, 0x06, 0x03, 0x55,
            0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x27, 0x6d, 0xf5, 0xf7, 0xe5, 0x94, 0x45, 0xeb, 0xfa, 0x09, 0xb2, 0x0d, 0x6e,
            0x85, 0xb3, 0x84, 0xfb, 0x65, 0x11, 0x24, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49,
            0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xd6, 0x8d, 0xa8, 0x5b, 0x32, 0xa8, 0xfe, 0x81, 0x34, 0x34, 0x1e, 0xc6, 0x47, 0x37, 0x70,
            0x86, 0x3c, 0xe9, 0x0a, 0x9c, 0x29, 0xc0, 0x15, 0x91, 0xed, 0xbd, 0xc8, 0x88, 0xa2, 0x4a, 0x76, 0x7a, 0x02, 0x21, 0x00, 0xaf,
            0x4f, 0xd0, 0x29, 0xd2, 0x57, 0xe5, 0x44, 0xe7, 0xe4, 0x72, 0x4e, 0xd4, 0x43, 0xab, 0x7c, 0x01, 0xf6, 0x41, 0x37, 0xc2, 0xb7,
            0x54, 0xaf, 0x6f, 0x1d, 0xba, 0xc5, 0xa6, 0x3b, 0xf3, 0x90,
        };

        // ./out/debug/linux_x64_gcc/chip-cert gen-att-cert -t d -c "Matter Dev DAC 0x6006/0xFFFE jdcsk12" -V 6006 -P FFFE -C examples/google-multi-device/device-common/attestation/Matter-Development-PAI-6006-noPID-Cert.der -K examples/google-multi-device/device-common/attestation/Matter-Development-PAI-6006-noPID-Key.der -k examples/google-multi-device/device-common/attestation/Matter-Development-DAC-6006-FFFE-Key2.der -o examples/google-multi-device/device-common/attestation/Matter-Development-DAC-6006-FFFE-Cert2.pem --lifetime 4294967295

        const uint8_t kDevelopmentDAC_Cert_6006_FFFE_2[500] = {
            0x30, 0x82, 0x01, 0xf0, 0x30, 0x82, 0x01, 0x96, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x0d,
            0xc0, 0x3e, 0x2f, 0x0d, 0x13, 0xa5, 0xab, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
            0x04, 0x03, 0x02, 0x30, 0x3d, 0x31, 0x25, 0x30, 0x23, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1c,
            0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x50, 0x41, 0x49, 0x20, 0x30,
            0x78, 0x36, 0x30, 0x30, 0x36, 0x20, 0x6e, 0x6f, 0x20, 0x50, 0x49, 0x44, 0x31, 0x14, 0x30, 0x12,
            0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x36, 0x30,
            0x30, 0x36, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x34, 0x30, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35,
            0x39, 0x35, 0x39, 0x5a, 0x30, 0x5b, 0x31, 0x2d, 0x30, 0x2b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,
            0x24, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x44, 0x41, 0x43, 0x20,
            0x30, 0x78, 0x36, 0x30, 0x30, 0x36, 0x2f, 0x30, 0x78, 0x46, 0x46, 0x46, 0x45, 0x20, 0x6a, 0x64,
            0x63, 0x73, 0x6b, 0x31, 0x32, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01,
            0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x36, 0x30, 0x30, 0x36, 0x31, 0x14, 0x30, 0x12, 0x06,
            0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x02, 0x0c, 0x04, 0x46, 0x46, 0x46,
            0x45, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08,
            0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xcf, 0xf9, 0xcc, 0xe9,
            0xac, 0x41, 0x00, 0xad, 0x67, 0x21, 0x50, 0xc9, 0x3a, 0x65, 0xfd, 0xaf, 0xd4, 0xc9, 0xcd, 0xfb,
            0xaa, 0x6a, 0xeb, 0xa3, 0x88, 0x67, 0x46, 0x91, 0xa7, 0x26, 0xb3, 0x29, 0x32, 0xbc, 0x99, 0x74,
            0xba, 0x13, 0xd5, 0x3d, 0x58, 0xf9, 0xd8, 0x2a, 0x4b, 0x2b, 0x1e, 0xc2, 0x81, 0xbc, 0xda, 0x40,
            0xe1, 0xe7, 0xa5, 0x98, 0x99, 0xba, 0x67, 0x7d, 0xe8, 0xe5, 0xa9, 0xbc, 0xa3, 0x60, 0x30, 0x5e,
            0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e,
            0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x1d,
            0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xe4, 0x03, 0x79, 0x87, 0xd5, 0xd1, 0x51,
            0xa7, 0x04, 0x0e, 0xf0, 0x12, 0xba, 0x43, 0x5c, 0x8c, 0x86, 0x21, 0xc1, 0x22, 0x30, 0x1f, 0x06,
            0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x27, 0x6d, 0xf5, 0xf7, 0xe5, 0x94,
            0x45, 0xeb, 0xfa, 0x09, 0xb2, 0x0d, 0x6e, 0x85, 0xb3, 0x84, 0xfb, 0x65, 0x11, 0x24, 0x30, 0x0a,
            0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02,
            0x21, 0x00, 0xe1, 0xa5, 0xc2, 0x1e, 0x85, 0x2f, 0x01, 0x5e, 0xd5, 0x38, 0x5d, 0x37, 0xd5, 0xcb,
            0x73, 0x22, 0x8b, 0x47, 0x95, 0xae, 0x19, 0xb0, 0x22, 0x0e, 0xf8, 0x6c, 0x4a, 0x91, 0x40, 0xb0,
            0x9c, 0x03, 0x02, 0x20, 0x08, 0xd0, 0xf3, 0x1e, 0x7b, 0x4f, 0x30, 0x46, 0x52, 0xd0, 0x45, 0xa2,
            0x54, 0xa8, 0x3a, 0xd9, 0x53, 0xbd, 0xa2, 0x35, 0xa7, 0x6c, 0x96, 0x74, 0x42, 0xd3, 0x67, 0xd1,
            0xb6, 0xf2, 0xb7, 0x87,
            };

        chip::ByteSpan dac_span1{kDevelopmentDAC_Cert_6006_FFFE_1};
        chip::ByteSpan dac_span2{kDevelopmentDAC_Cert_6006_FFFE_2};
        chip::ByteSpan dac_span = mUseSecondDac ? dac_span2 : dac_span1;

        return chip::CopySpanToMutableSpan(dac_span, out_dac_buffer);
    }

    CHIP_ERROR GetProductAttestationIntermediateCert(chip::MutableByteSpan & out_pai_buffer) override
    {
        const uint8_t kDevelopmentPAI_Cert_6006[441] = {
            0x30, 0x82, 0x01, 0xb5, 0x30, 0x82, 0x01, 0x5b, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x2b, 0x89, 0xaa, 0x99, 0x78, 0x7a,
            0x29, 0x66, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x1a, 0x31, 0x18, 0x30, 0x16, 0x06,
            0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x50, 0x41, 0x41,
            0x30, 0x20, 0x17, 0x0d, 0x32, 0x34, 0x30, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39,
            0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x3d, 0x31, 0x25, 0x30, 0x23, 0x06, 0x03,
            0x55, 0x04, 0x03, 0x0c, 0x1c, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x44, 0x65, 0x76, 0x20, 0x50, 0x41, 0x49, 0x20, 0x30,
            0x78, 0x36, 0x30, 0x30, 0x36, 0x20, 0x6e, 0x6f, 0x20, 0x50, 0x49, 0x44, 0x31, 0x14, 0x30, 0x12, 0x06, 0x0a, 0x2b, 0x06, 0x01,
            0x04, 0x01, 0x82, 0xa2, 0x7c, 0x02, 0x01, 0x0c, 0x04, 0x36, 0x30, 0x30, 0x36, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
            0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x96, 0xea,
            0x61, 0x60, 0x45, 0xef, 0x91, 0x58, 0x0f, 0xba, 0x15, 0xa8, 0x14, 0xa7, 0x29, 0x0d, 0xbe, 0xe8, 0x5b, 0x65, 0x07, 0xf3, 0x8e,
            0xe0, 0xd5, 0x51, 0x01, 0x54, 0x10, 0x8d, 0x66, 0x65, 0x0c, 0x50, 0xe0, 0x0f, 0xb5, 0x38, 0xd4, 0xb8, 0x7b, 0x05, 0xfa, 0x6d,
            0xa1, 0xce, 0xd2, 0x66, 0x9b, 0x44, 0xf4, 0xfd, 0x1a, 0x4a, 0xc8, 0xd1, 0xb8, 0x0f, 0xe3, 0x56, 0x1b, 0x1f, 0x7a, 0x59, 0xa3,
            0x66, 0x30, 0x64, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02,
            0x01, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06,
            0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x27, 0x6d, 0xf5, 0xf7, 0xe5, 0x94, 0x45, 0xeb, 0xfa, 0x09, 0xb2, 0x0d, 0x6e,
            0x85, 0xb3, 0x84, 0xfb, 0x65, 0x11, 0x24, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x78,
            0x5c, 0xe7, 0x05, 0xb8, 0x6b, 0x8f, 0x4e, 0x6f, 0xc7, 0x93, 0xaa, 0x60, 0xcb, 0x43, 0xea, 0x69, 0x68, 0x82, 0xd5, 0x30, 0x0a,
            0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xb8, 0x71, 0x63,
            0x17, 0x6d, 0x30, 0x42, 0xab, 0x03, 0xcc, 0x4b, 0x3a, 0xf5, 0xf5, 0xd0, 0xc1, 0xf6, 0xe2, 0xb8, 0x94, 0x10, 0x54, 0xce, 0x9d,
            0x42, 0x5f, 0xa7, 0xfc, 0x83, 0xa7, 0xa8, 0xfb, 0x02, 0x20, 0x54, 0x29, 0x0f, 0x19, 0xc4, 0xb4, 0x07, 0xee, 0xc3, 0x8f, 0xec,
            0xe1, 0x12, 0x07, 0x57, 0xca, 0xc0, 0x7c, 0x4e, 0x34, 0x64, 0x63, 0x45, 0x78, 0x41, 0x75, 0xbf, 0x3a, 0xb0, 0x67, 0xcf, 0x0f,
        };

        return chip::CopySpanToMutableSpan(chip::ByteSpan{ kDevelopmentPAI_Cert_6006 }, out_pai_buffer);
    }

    CHIP_ERROR SignWithDeviceAttestationKey(const chip::ByteSpan & message_to_sign, chip::MutableByteSpan & out_signature_buffer) override
    {
        const uint8_t kDevelopmentDAC_PrivateKey_6006_FFFE_1[32] = {
            0xdd, 0x49, 0xeb, 0xfb, 0x40, 0xc9, 0xb7, 0x5f, 0x63, 0x91, 0x53, 0xe5, 0xd1, 0xf0, 0x1e, 0xff,
            0x2d, 0xd7, 0xf5, 0xd2, 0x6a, 0xdd, 0x82, 0xb0, 0x70, 0xd7, 0xc7, 0x6a, 0xc3, 0x4d, 0xb4, 0xed,
        };

        const uint8_t kDevelopmentDAC_PublicKey_6006_FFFE_1[65] = {
            0x04, 0x5d, 0xc0, 0xb7, 0xc2, 0x38, 0x50, 0x63, 0x8c, 0x01, 0xf6, 0x71, 0x8c, 0x1a, 0x29, 0x8d, 0x02,
            0xfc, 0x6a, 0x96, 0x8c, 0x64, 0xda, 0x48, 0xab, 0xaa, 0xfe, 0x02, 0xe4, 0xb4, 0x71, 0x7c, 0x46, 0xe1,
            0x6a, 0xfd, 0x75, 0x10, 0xc1, 0xc5, 0x06, 0x9f, 0x93, 0xcf, 0x64, 0xf6, 0xa5, 0x90, 0x8b, 0x9d, 0xdd,
            0x8d, 0xdc, 0xed, 0xdd, 0x0a, 0xac, 0xc3, 0x35, 0xf9, 0xdb, 0x01, 0x71, 0x7f, 0xa7,
        };

        const uint8_t kDevelopmentDAC_PrivateKey_6006_FFFE_2[32] = {
            0xd7, 0x9f, 0xb6, 0x2c, 0xf5, 0x66, 0x12, 0xe1, 0xc2, 0x63, 0x13, 0x2c, 0x68, 0x3a, 0x78, 0xdb,
            0x21, 0x41, 0xa8, 0x06, 0x08, 0x2c, 0x03, 0x7e, 0xa2, 0xa2, 0x51, 0xe1, 0xd4, 0x69, 0x0c, 0xb1,
        };

        const uint8_t kDevelopmentDAC_PublicKey_6006_FFFE_2[65] = {
            0x04, 0xcf, 0xf9, 0xcc, 0xe9, 0xac, 0x41, 0x00, 0xad, 0x67, 0x21, 0x50, 0xc9, 0x3a, 0x65, 0xfd, 0xaf,
            0xd4, 0xc9, 0xcd, 0xfb, 0xaa, 0x6a, 0xeb, 0xa3, 0x88, 0x67, 0x46, 0x91, 0xa7, 0x26, 0xb3, 0x29, 0x32,
            0xbc, 0x99, 0x74, 0xba, 0x13, 0xd5, 0x3d, 0x58, 0xf9, 0xd8, 0x2a, 0x4b, 0x2b, 0x1e, 0xc2, 0x81, 0xbc,
            0xda, 0x40, 0xe1, 0xe7, 0xa5, 0x98, 0x99, 0xba, 0x67, 0x7d, 0xe8, 0xe5, 0xa9, 0xbc,
        };

        chip::Crypto::P256ECDSASignature signature;
        chip::Crypto::P256Keypair keypair;

        VerifyOrReturnError(!out_signature_buffer.empty(), CHIP_ERROR_INVALID_ARGUMENT);
        VerifyOrReturnError(!message_to_sign.empty(), CHIP_ERROR_INVALID_ARGUMENT);
        VerifyOrReturnError(out_signature_buffer.size() >= signature.Capacity(), CHIP_ERROR_BUFFER_TOO_SMALL);

        // In a non-exemplary implementation, the public key is not needed here. It is used here merely because
        // Crypto::P256Keypair is only (currently) constructable from raw keys if both private/public keys are present.
        chip::ByteSpan sk_span1{kDevelopmentDAC_PrivateKey_6006_FFFE_1};
        chip::ByteSpan sk_span2{kDevelopmentDAC_PrivateKey_6006_FFFE_2};
        chip::ByteSpan sk_span = mUseSecondDac ? sk_span2 : sk_span1;

        chip::ByteSpan pk_span1{kDevelopmentDAC_PublicKey_6006_FFFE_1};
        chip::ByteSpan pk_span2{kDevelopmentDAC_PublicKey_6006_FFFE_2};
        chip::ByteSpan pk_span = mUseSecondDac ? pk_span2 : pk_span1;

        ReturnErrorOnFailure(LoadKeypairFromRaw(sk_span, pk_span, keypair));
        ReturnErrorOnFailure(keypair.ECDSA_sign_msg(message_to_sign.data(), message_to_sign.size(), signature));

        return chip::CopySpanToMutableSpan(chip::ByteSpan{ signature.ConstBytes(), signature.Length() }, out_signature_buffer);
    }

  private:
    CHIP_ERROR LoadKeypairFromRaw(chip::ByteSpan private_key, chip::ByteSpan public_key, chip::Crypto::P256Keypair & keypair)
    {
        chip::Crypto::P256SerializedKeypair serialized_keypair;
        ReturnErrorOnFailure(serialized_keypair.SetLength(private_key.size() + public_key.size()));
        memcpy(serialized_keypair.Bytes(), public_key.data(), public_key.size());
        memcpy(serialized_keypair.Bytes() + public_key.size(), private_key.data(), private_key.size());
        return keypair.Deserialize(serialized_keypair);
    }

    bool mUseSecondDac = false;
};

} // namespace matter
} // namespace google
