# Copyright (c) 2022 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Test all the schema parts"

# Test whether we can set config parameters for all the things.
config:
    nodeId: 0x12344321
    endpoint: 0x1
    cluster: "Test Cluster"
    timeout: 0x100
    allClustersPayload:
        type: char_string
        defaultValue: "MT:-24J0AFN00KA0648G00"
    newEndpoint:
        type: int16u
        defaultValue: 0
    newCluster:
        type: char_string
        defaultValue: "Descriptor"
    newCommand:
        type: char_string
        defaultValue: "readAttribute"
    newAttribute:
        type: char_string
        defaultValue: "boolean"
    newEvent:
        type: char_string
        defaultValue: "TestEvent"
    newIdentity:
        type: char_string
        defaultValue: "beta"
    booleanTrue:
        type: boolean
        defaultValue: True
    booleanFalse:
        type: boolean
        defaultValue: False
    zero:
        type: int16u
        defaultValue: 0
    one:
        type: int16u
        defaultValue: 1
    two:
        type: int16u
        defaultValue: 2
    three:
        type: int16u
        defaultValue: 3
    five:
        type: int16u
        defaultValue: 5
    randomString:
        type: char_string
        defaultValue: "random"
    startString:
        type: char_string
        defaultValue: "te"
    endString:
        type: char_string
        defaultValue: "st"

tests:
    #################################################
    # Config parameters
    #################################################

    #- label: "Wait for the commissioned device to be retrieved"
    - cluster: "DelayCommands"
      command: "WaitForCommissionee"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId

    - label: "Test that the config parameters work"
      command: "readAttribute"
      attribute: "boolean"
      response:
          value: false

    # Test overwriting label with variable
    - label: endString
      command: "readAttribute"
      attribute: "boolean"

    # This does work, but permanantly changes the endpoint for the remainder of the tests
    # This is different than the cluster setting which changes only for the current tests item
    - label: "Test overwriting endpoint"
      endpoint: 0
      command: "readAttribute"
      attribute: "Boolean"
      response:
          error: UNSUPPORTED_CLUSTER

    # This is only needed because the above command sets the endpoint globally
    - label: "Test overwriting endpoint"
      endpoint: 1
      command: "readAttribute"
      attribute: "Boolean"

    # This will pass the zap compiler, but generates code that doesn't compile
    - label: "Test overwriting endpoint with variable"
      endpoint: newEndpoint
      command: "readAttribute"
      attribute: "Boolean"
      response:
          error: UNSUPPORTED_CLUSTER
      disabled: True

    - label: "Test overwriting cluster"
      cluster: "Descriptor"
      command: "readAttribute"
      attribute: "PartsList"
      response:
          value: []

    # Cluster can't be overwritten with a variable currently
    - label: "Test overwriting cluster with variable"
      cluster: newCluster
      command: "readAttribute"
      attribute: "PartsList"
      response:
          value: []
      disabled: true

    # Setting command from variable is not supported. Disabled doesn't
    # work here because apparently the command portion is evaluated
    # before enabled/disabled
    #- label: "Test setting command from variable"
    #  command: newCommand
    #  attribute: "boolean"
    #  disabled: True

    # Setting attribute from variable is not supported. Disabled does
    # appear to work here through, so it's got that going for it.
    - label: "Test setting attribute from variable"
      command: "readAttribute"
      attribute: newAttribute
      disabled: True

    # Unsurprisingly, this also doesn't work.
    - label: "Test setting event from variable"
      command: "readEvent"
      event: newEvent
      disabled: True

    # NodeId apparently can't be overwritten in tests
    - label: "Test overwriting nodeId"
      nodeId: 0x1
      command: "readAttribute"
      attribute: "boolean"
      response:
          error: TIMEOUT
      disabled: True

    #################################################
    # IM commands - minimal mandatory properties
    # readAttribute
    # writeAttribute
    # subscribeAttribute
    # readEvent
    # subscribeEvent
    #
    # attribute
    # event
    #################################################
    - label: "Test readAttribute"
      command: "readAttribute"
      attribute: "boolean"

    - label: "Test writeAttribute"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: true

    - label: "Test subscribeAttribute"
      command: "subscribeAttribute"
      attribute: "boolean"
      minInterval: 3
      maxInterval: 0x5

    - label: "Test readEvent"
      command: "readEvent"
      event: "TestEvent"

    - label: "Test subscribeEvent"
      command: "subscribeEvent"
      event: "TestEvent"
      minInterval: 0x3
      maxInterval: 5

    #################################################
    # Tests properties
    # disabled
    # identify
    # optional
    # PICS
    # timedInteractionTimeoutMs
    # fabricFiltered
    # minInterval
    # maxInterval
    # suppressResponse
    # dataVesion
    # keepSubsciptions
    # eventNumber
    # repeatCount
    # repeatDelayMs
    #################################################
    - label: "Set boolean to true"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: true

    # DISABLED
    - label: "this test should fail, but that's ok because it's disabled"
      command: "readAttribute"
      attribute: "boolean"
      response:
          value: false
      disabled: True

    - label: "This test should not be disabled - set boolean to false"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: false
      disabled: False

    - label: "Ensure the last test was not disabled"
      command: "readAttribute"
      attribute: "boolean"
      response:
          value: false

    # surprisingly, this appears to work
    - label:
          "this test should fail, but that's ok because it's disabled (variable)"
      command: "readAttribute"
      attribute: "boolean"
      response:
          value: true
      disabled: booleanTrue

    # This doesn't work though - test gets disabled because apparently any value
    # here disables the test
    - label: "This test should not be disabled - set boolean to false (variable)"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: true
      disabled: booleanFalse

    - label: "Ensure the last test was not disabled"
      command: "readAttribute"
      attribute: "boolean"
      response:
          value: true
      disabled: True

    # IDENTITY
    # We should be allowed to commission on a second fabric if identify
    # works correctly. Once the fabric is removed, we should revert back
    # to the default fabric, which will let the rest of the test cases
    # run correctly.
    - label: "Open Commissioning Window"
      endpoint: 0
      cluster: "AdministratorCommissioning"
      command: "OpenBasicCommissioningWindow"
      timedInteractionTimeoutMs: 10000
      arguments:
          values:
              - name: "CommissioningTimeout"
                value: 180

    - label: "Commission from beta"
      identity: "beta"
      cluster: "CommissionerCommands"
      command: "PairWithCode"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId
              - name: "payload"
                value: allClustersPayload

    - label: "Wait for the commissioned device to be retrieved"
      identity: "beta"
      cluster: "DelayCommands"
      command: "WaitForCommissionee"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId

    - label: "Read from beta"
      identity: "beta"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "CurrentFabricIndex"
      response:
          value: 2

    # Does not work
    - label: "Read from beta set by variable"
      identity: newIdentity
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "CurrentFabricIndex"
      response:
          value: 2
      disabled: True

    - label: "Read from original identity"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "CurrentFabricIndex"
      response:
          value: 1

    # Test setting identity from number
    - label: "Open Commissioning Window"
      endpoint: 0
      cluster: "AdministratorCommissioning"
      command: "OpenBasicCommissioningWindow"
      timedInteractionTimeoutMs: 10000
      arguments:
          values:
              - name: "CommissioningTimeout"
                value: 180

    # Setting identity by number doesn't currently work
    - label: "Commission from 4"
      identity: 4
      cluster: "CommissionerCommands"
      command: "PairWithCode"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId
              - name: "payload"
                value: allClustersPayload
      disabled: True

    - label: "Wait for the commissioned device to be retrieved"
      identity: 4
      cluster: "DelayCommands"
      command: "WaitForCommissionee"
      arguments:
          values:
              - name: "nodeId"
                value: nodeId
      disabled: True

    - label: "Read from 4"
      identity: 4
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "CurrentFabricIndex"
      response:
          value: 2
      disabled: True

    - label: "Read from original identity"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "CurrentFabricIndex"
      response:
          value: 1

    # FABRIC FILTERED
    - label: "Default is fabric-filtered"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "Fabrics"
      response:
          constraints:
              minLength: 1
              maxLength: 1

    - label: "Read non-fabric filtered"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "Fabrics"
      fabricFiltered: False
      response:
          constraints:
              minLength: 2
              maxLength: 2

    - label: "Read fabric-filtered"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "Fabrics"
      fabricFiltered: True
      response:
          constraints:
              minLength: 1
              maxLength: 1

    # This doesn't work
    - label: "Read non-fabric filtered from variable"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "Fabrics"
      fabricFiltered: booleanFalse
      response:
          constraints:
              minLength: 2
              maxLength: 2
      disabled: True

    - label: "We should go back to default here (fabric-filtered)"
      endpoint: 0
      cluster: "Operational Credentials"
      command: "readAttribute"
      attribute: "Fabrics"
      response:
          constraints:
              minLength: 1
              maxLength: 1

    # This is only needed because the above command sets the endpoint globally
    - label: "Set the endpoint back, which should not be required, but is"
      endpoint: 1
      command: "readAttribute"
      attribute: "Boolean"

    # OPTIONAL
    - label: "Set boolean to true"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: true

    # NOTE: as it turns out, having this test fail causes a full-out test failure.
    # so much for optional, eh?
    - label: "this test should fail, but that's ok because it's optional"
      command: "readAttribute"
      attribute: "boolean"
      response:
          value: False
      optional: True
      disabled: True

    # PICS
    # TODO: fill this in - we know this works from other tests, so leaving for now

    # timedInteractionTimeoutMs
    # TODO: fill this in

    # MIN INTERVAL, MAX INTERVAL
    - label: "Test minInterval, maxInterval"
      command: "subscribeEvent"
      event: "TestEvent"
      minInterval: 3
      maxInterval: 5

    # Generates uncompilable code
    - label: "Test minInterval, maxInterval variables"
      command: "subscribeEvent"
      event: "TestEvent"
      minInterval: three
      maxInterval: five
      disabled: True

    # SUPPRESS RESPONSE
    # This generates uncompilable code. The zapt specifies a bool, but it seems
    # the underlying code is expecting a short.
    - label: "Test suppressResponse"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: true
      suppressResponse: True
      disabled: True

    # Generates uncompilable code too. But this code would not work with the variable
    # even if suppress response actually worked. Which it doesn't.
    - label: "Test suppressResponse variable"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: true
      suppressResponse: booleanTrue
      disabled: true

    # This doesn't work either.
    - label: "Test suppressResponse with commands"
      command: "Test"
      suppressResponse: True
      disabled: true

    - label: "Test keep subscriptions"
      command: "subscribeAttribute"
      attribute: "int8u"
      keepSubscriptions: true
      minInterval: 3
      maxInterval: 5

    # This generates and compiles, but doesn't actually set the keepSubscriptions
    - label: "Test keep subscriptions with variable"
      command: "subscribeAttribute"
      attribute: "int16u"
      keepSubscripions: booleanTrue
      minInterval: 3
      maxInterval: 5

    - label: "Test eventNumber"
      command: "subscribeEvent"
      event: "TestEvent"
      minInterval: 3
      maxInterval: 5
      eventNumber: 1

    - label: "Test eventNumber from variable"
      command: "subscribeEvent"
      event: "TestEvent"
      minInterval: 3
      maxInterval: 5
      eventNumber: one

    # REPEAT COUNT - note that neither of these actually repeat, which is incorrect
    - label: "Test Repeats no delay"
      command: "Test"
      repeatCount: 2

    - label: "Test Repeats with delay"
      command: "Test"
      repeatCount: 2
      repeatDelayMs: 5

    #################################################
    # Constraints
    # Test each of the constraints with the matrix
    # of values
    # single number - normal / null / optional / nulloptional
    # single string - normal / null / optional / nulloptional
    # list - normal / null / optional / nulloptional
    # struct - normal / null / optional / nulloptional
    # bitmap
    #################################################
    - label: "Setup boolean with variable"
      command: "writeAttribute"
      attribute: "boolean"
      arguments:
          value: booleanTrue

    - label: "Test boolean no variables - constraints"
      command: "readAttribute"
      attribute: "boolean"
      response:
          constraints:
              # The parser should actually error on the ones that don't make
              # sense in context, but for now we just test the positive cases
              # to ensure they work
              # Silently ignored for non-optional values. This should warn.
              hasValue: True
              type: boolean
              minValue: 1
              maxValue: 1
              notValue: 0
              # surprisingly, these seem to work and pass
              minLength: 1
              maxLength: 1
              # For numbers, these will generate code, but the code will not compile
              #startsWith: 1
              #endsWith: 1
              #isLowerCase: False
              #isUpperCase: False
              #isHexString: False
              # zap will let this slide, but creates code that does not compile
              # if you use these with non-lists
              #contains: [1]
              #excludes: [0]
              # I shouldn't be allowed to do this, but here we are
              hasMasksSet: [1]
              hasMasksClear: [0x2]

    - label: "Test boolean no variables - constraints with variables"
      command: "readAttribute"
      attribute: "boolean"
      response:
          constraints:
              type: boolean
              #none of these work - zap will generate, but the code won't compile.
              #minValue: one
              #maxValue: one
              #notValue: zero
              #minLength: one
              #maxLength: one
              #hasMasksSet: [one]
              #hasMasksClear: [two]

    - label: "Set null value on nullable_boolean"
      command: "writeAttribute"
      attribute: "nullable_boolean"
      arguments:
          value: null

    - label: "Test null value on nullable_boolean"
      command: "readAttribute"
      attribute: "nullable_boolean"
      response:
          value: null

    - label: "Set char_string value"
      command: "writeAttribute"
      attribute: "char_string"
      arguments:
          value: "testytest"

    - label: "Test string no variables - constraints"
      command: "readAttribute"
      attribute: "char_string"
      response:
          constraints:
              # The parser should actually error on the ones that don't make
              # sense in context, but for now we just test the positive cases
              # to ensure they work
              # Silently ignored for non-optional values. This should warn.
              hasValue: True
              type: char_string
              # zap will generate code for these, but it won't compile
              #minValue: 1
              #maxValue: 1
              # This apparently does not work for strings
              # notValue: "hello"
              # surprisingly, these seem to work and pass
              minLength: 1
              maxLength: 100
              startsWith: "te"
              endsWith: "st"
              isLowerCase: True
              isUpperCase: False
              isHexString: False
              # zap will let this slide, but creates code that does not compile
              # if you use these with non-lists
              #contains: [1]
              #excludes: [0]
              # generates non-compilable code for strings
              #hasMasksSet: [1]
              #hasMasksClear: [0x2]

    - label: "Test string with variables - constraints"
      command: "readAttribute"
      attribute: "char_string"
      response:
          constraints:
              type: char_string
              # these generate, but don't work because they're assumed to be the actual strings we want
              #startsWith: startString
              #endsWith: endString
              # no dice on these
              #isLowerCase: booleanTrue
              #isUpperCase: boooleanFalse
              #isHexString: booleanFalse

    - label: "Set null value on nullable_char_string"
      command: "writeAttribute"
      attribute: "nullable_char_string"
      arguments:
          value: null

    - label: "Test null value on nullable_char_string"
      command: "readAttribute"
      attribute: "nullable_char_string"
      response:
          value: null
#list_nullables_and_optionals_struct

#Checking command return types
# test error
# test all values, min max, not constraints, type

#constraints on individual struct pieces
